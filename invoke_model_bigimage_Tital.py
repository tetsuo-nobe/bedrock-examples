#
#  プロンプトから複数の新しい画像を生成する
# 
import base64
import io
import json
import logging
import boto3
from PIL import Image
import datetime

from botocore.exceptions import ClientError


class ImageError(Exception):
    "Custom exception for errors returned by Amazon &titan-image;"

    def __init__(self, message):
        self.message = message


logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


def generate_image(model_id, body):
    """
    Generate an image using Amazon &titan-image; model on demand.
    Args:
        model_id (str): The model ID to use.
        body (str) : The request body to use.
    Returns:
        image_bytes (bytes): The image generated by the model.
    """

    logger.info(
        "Generating image with Amazon &titan-image; model %s", model_id)

    bedrock = boto3.client(service_name='bedrock-runtime')

    accept = "application/json"
    content_type = "application/json"

    response = bedrock.invoke_model(
        body=body, modelId=model_id, accept=accept, contentType=content_type
    )
    response_body = json.loads(response.get("body").read())

    base64_images = response_body.get("images")
    # base64_image = response_body.get("images")[0]
    # base64_bytes = base64_image.encode('ascii')
    # image_bytes = base64.b64decode(base64_bytes)

    finish_reason = response_body.get("error")

    if finish_reason is not None:
        raise ImageError(f"Image generation error. Error is {finish_reason}")

    logger.info(
        "Successfully generated image with Amazon &titan-image; model %s", model_id)

    # return image_bytes
    return base64_images


def main():
    """
    Entrypoint for Amazon &titan-image; example.
    """

    logging.basicConfig(level=logging.INFO,
                        format="%(levelname)s: %(message)s")

    model_id = 'amazon.titan-image-generator-v1'

    prompt = """A photograph of a cup of coffee from the side."""
    
    quality_p = "premium"
    quality_s = "standard"

    body = json.dumps({
        "taskType": "TEXT_IMAGE",
        "textToImageParams": {
            "text": prompt
        },
        "imageGenerationConfig": {
            "numberOfImages": 4,
            "quality": quality_p,
            "height": 1024,
            "width": 1024,
            "cfgScale": 8.0,
            "seed": 0
        }
    })

    try:
        # image_bytes = generate_image(model_id=model_id,
        #                              body=body)
        # image = Image.open(io.BytesIO(image_bytes))
        # dt_now = datetime.datetime.now()
        # image.save(str(dt_now) + ".png")
        base64_images = generate_image(model_id=model_id,
                                      body=body)
        i = 0
        for base64_image in base64_images:
            i += 1
            print("---" + str(i))
            base64_bytes = base64_image.encode('ascii')
            image_bytes = base64.b64decode(base64_bytes)
            image = Image.open(io.BytesIO(image_bytes))
            dt_now = datetime.datetime.now()
            image.save(str(dt_now) + "_" + str(i) + ".png")
        
    except ClientError as err:
        message = err.response["Error"]["Message"]
        logger.error("A client error occurred: %s", message)
        print("A client error occured: " +
              format(message))
    except ImageError as err:
        logger.error(err.message)
        print(err.message)

    else:
        print(
            f"Finished generating image with Amazon &titan-image; model {model_id}.")


if __name__ == "__main__":
    main()
